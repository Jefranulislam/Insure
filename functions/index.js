const functions = require('firebase-functions');
const admin = require('firebase-admin');
const nodemailer = require('nodemailer');

// Initialize Firebase Admin
admin.initializeApp();

// Email configuration using Gmail SMTP
// You can also use SendGrid, AWS SES, or other email services
const gmailEmail = functions.config().gmail.email;
const gmailPassword = functions.config().gmail.password;

// Create reusable transporter object using Gmail SMTP
const transporter = nodemailer.createTransporter({
  service: 'gmail',
  auth: {
    user: gmailEmail,
    pass: gmailPassword, // Use App Password for Gmail
  },
});

/**
 * Send warranty claim email to manufacturer
 * Triggered when warranty claim is submitted
 */
exports.sendWarrantyClaimEmail = functions.https.onCall(async (data, context) => {
  // Verify user is authenticated
  if (!context.auth) {
    throw new functions.https.HttpsError(
      'unauthenticated',
      'User must be authenticated to send warranty emails.'
    );
  }

  try {
    // Validate required data
    const {
      manufacturerEmail,
      brandName,
      productName,
      claimNumber,
      issueType,
      issueTitle,
      description,
      customerName,
      customerEmail,
    } = data;

    if (!manufacturerEmail || !brandName || !productName || !claimNumber) {
      throw new functions.https.HttpsError(
        'invalid-argument',
        'Missing required email parameters.'
      );
    }

    // Email subject
    const subject = `Warranty Claim: ${productName} - Claim #${claimNumber}`;

    // Email HTML template
    const htmlTemplate = `
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background-color: #1E88E5; color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; }
        .claim-details { background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 15px 0; }
        .footer { background-color: #f0f0f0; padding: 15px; text-align: center; font-size: 12px; }
        .highlight { color: #1E88E5; font-weight: bold; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>üõ°Ô∏è INSURE Warranty Claim</h1>
        <p>Warranty Management System</p>
      </div>
      
      <div class="content">
        <h2>Dear ${brandName} Support Team,</h2>
        
        <p>A warranty claim has been submitted through the INSURE warranty management app. Please review the details below and respond accordingly.</p>
        
        <div class="claim-details">
          <h3>üìã Claim Information</h3>
          <p><strong>Claim Number:</strong> <span class="highlight">${claimNumber}</span></p>
          <p><strong>Product Name:</strong> ${productName}</p>
          <p><strong>Brand:</strong> ${brandName}</p>
          <p><strong>Issue Type:</strong> ${issueType}</p>
          <p><strong>Issue Title:</strong> ${issueTitle}</p>
          <p><strong>Submission Date:</strong> ${new Date().toLocaleDateString()}</p>
        </div>
        
        <div class="claim-details">
          <h3>üìù Issue Description</h3>
          <p>${description}</p>
        </div>
        
        <div class="claim-details">
          <h3>üë§ Customer Information</h3>
          <p><strong>Name:</strong> ${customerName}</p>
          <p><strong>Email:</strong> ${customerEmail}</p>
        </div>
        
        <h3>üìû Next Steps</h3>
        <p>Please review this warranty claim and provide an update on:</p>
        <ul>
          <li>Warranty coverage confirmation</li>
          <li>Required documentation (if any)</li>
          <li>Repair/replacement process</li>
          <li>Estimated timeline for resolution</li>
        </ul>
        
        <p>You can respond directly to this email or contact the customer at <a href="mailto:${customerEmail}">${customerEmail}</a>.</p>
      </div>
      
      <div class="footer">
        <p>This email was automatically generated by the INSURE Warranty Management App</p>
        <p>üåê Visit our website: <a href="https://insureapp.com">insureapp.com</a></p>
        <p>üì± Download the app for warranty management</p>
      </div>
    </body>
    </html>
    `;

    // Plain text version
    const textTemplate = `
INSURE Warranty Claim - ${brandName}

Dear ${brandName} Support Team,

A warranty claim has been submitted through the INSURE warranty management app.

CLAIM INFORMATION:
- Claim Number: ${claimNumber}
- Product Name: ${productName}
- Brand: ${brandName}
- Issue Type: ${issueType}
- Issue Title: ${issueTitle}
- Submission Date: ${new Date().toLocaleDateString()}

ISSUE DESCRIPTION:
${description}

CUSTOMER INFORMATION:
- Name: ${customerName}
- Email: ${customerEmail}

NEXT STEPS:
Please review this warranty claim and provide an update on:
1. Warranty coverage confirmation
2. Required documentation (if any)
3. Repair/replacement process
4. Estimated timeline for resolution

You can respond directly to this email or contact the customer at ${customerEmail}.

---
This email was automatically generated by the INSURE Warranty Management App
Visit our website: https://insureapp.com
    `;

    // Send email
    const mailOptions = {
      from: `"INSURE Warranty System" <${gmailEmail}>`,
      to: manufacturerEmail,
      cc: customerEmail, // CC the customer
      subject: subject,
      text: textTemplate,
      html: htmlTemplate,
    };

    const result = await transporter.sendMail(mailOptions);
    
    // Log successful email send
    console.log('‚úÖ Warranty claim email sent successfully:', {
      claimNumber,
      brandName,
      manufacturerEmail,
      messageId: result.messageId,
    });

    // Save email log to Firestore
    await admin.firestore().collection('email_logs').add({
      type: 'warranty_claim',
      claimNumber,
      brandName,
      manufacturerEmail,
      customerEmail,
      subject,
      status: 'sent',
      messageId: result.messageId,
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      userId: context.auth.uid,
    });

    return {
      success: true,
      message: 'Warranty claim email sent successfully',
      claimNumber,
      messageId: result.messageId,
    };

  } catch (error) {
    console.error('‚ùå Error sending warranty claim email:', error);
    
    // Log failed email attempt
    await admin.firestore().collection('email_logs').add({
      type: 'warranty_claim_failed',
      claimNumber: data.claimNumber,
      brandName: data.brandName,
      manufacturerEmail: data.manufacturerEmail,
      error: error.message,
      status: 'failed',
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      userId: context.auth?.uid,
    });

    throw new functions.https.HttpsError(
      'internal',
      'Failed to send warranty claim email',
      error.message
    );
  }
});

/**
 * Send warranty expiry reminder emails
 * Triggered daily via Cloud Scheduler
 */
exports.sendWarrantyExpiryReminders = functions.pubsub
  .schedule('0 9 * * *') // Run daily at 9 AM
  .timeZone('America/New_York')
  .onRun(async (context) => {
    try {
      console.log('üîî Running warranty expiry reminder job...');
      
      // Get warranties expiring in 30 days
      const thirtyDaysFromNow = new Date();
      thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
      
      const expiringWarranties = await admin
        .firestore()
        .collection('warranties')
        .where('expiryDate', '<=', thirtyDaysFromNow)
        .where('expiryDate', '>', new Date())
        .get();

      const reminderPromises = [];
      
      expiringWarranties.forEach((doc) => {
        const warranty = doc.data();
        const daysLeft = Math.ceil(
          (warranty.expiryDate.toDate() - new Date()) / (1000 * 60 * 60 * 24)
        );
        
        if (daysLeft <= 30 && daysLeft > 0) {
          reminderPromises.push(sendExpiryReminderEmail(warranty, daysLeft));
        }
      });
      
      await Promise.all(reminderPromises);
      
      console.log(`‚úÖ Sent ${reminderPromises.length} warranty expiry reminders`);
      return null;
      
    } catch (error) {
      console.error('‚ùå Error in warranty expiry reminder job:', error);
      throw error;
    }
  });

/**
 * Helper function to send expiry reminder email
 */
async function sendExpiryReminderEmail(warranty, daysLeft) {
  try {
    // Get user email
    const userDoc = await admin.firestore().collection('users').doc(warranty.userId).get();
    const userEmail = userDoc.exists ? userDoc.data().email : null;
    
    if (!userEmail) {
      console.log(`‚ö†Ô∏è No email found for user ${warranty.userId}`);
      return;
    }

    const subject = `‚è∞ Warranty Expiring Soon: ${warranty.productName}`;
    
    const htmlTemplate = `
    <!DOCTYPE html>
    <html>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
      <div style="background-color: #FF9800; color: white; padding: 20px; text-align: center;">
        <h1>‚è∞ Warranty Expiry Reminder</h1>
      </div>
      
      <div style="padding: 20px;">
        <h2>Your warranty is expiring soon!</h2>
        
        <div style="background-color: #fff3cd; padding: 15px; border-radius: 5px; margin: 15px 0;">
          <p><strong>Product:</strong> ${warranty.productName}</p>
          <p><strong>Brand:</strong> ${warranty.brand}</p>
          <p><strong>Days Remaining:</strong> <span style="color: #FF5722; font-weight: bold;">${daysLeft} days</span></p>
          <p><strong>Expiry Date:</strong> ${warranty.expiryDate.toDate().toLocaleDateString()}</p>
        </div>
        
        <h3>üìã What you should do:</h3>
        <ul>
          <li>Check if you have any current issues with the product</li>
          <li>Submit warranty claims before expiry</li>
          <li>Keep all purchase receipts and warranty documents</li>
          <li>Contact the manufacturer if you have concerns</li>
        </ul>
        
        <p>Open the INSURE app to manage your warranties and submit claims if needed.</p>
      </div>
      
      <div style="background-color: #f0f0f0; padding: 15px; text-align: center; font-size: 12px;">
        <p>INSURE - Never Lose a Warranty Again</p>
      </div>
    </body>
    </html>
    `;

    const mailOptions = {
      from: `"INSURE Warranty System" <${gmailEmail}>`,
      to: userEmail,
      subject: subject,
      html: htmlTemplate,
    };

    await transporter.sendMail(mailOptions);
    console.log(`‚úÖ Expiry reminder sent for ${warranty.productName} to ${userEmail}`);
    
  } catch (error) {
    console.error('‚ùå Error sending expiry reminder:', error);
  }
}
